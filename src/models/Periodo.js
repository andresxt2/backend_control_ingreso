import { Periodo } from "../schemas/Periodo_schema.js";

export class PeriodoModel {

    /** üîπ Obtener todos los per√≠odos activos */
    static async getPeriodos() {
        try {
            return await Periodo.findAll({ where: { Periodo_IsDeleted: false } });
        } catch (error) {
            throw new Error(`Error al obtener per√≠odos: ${error.message}`);
        }
    }

    /** üîπ Obtener un per√≠odo por ID, solo si no est√° eliminado */
    static async getById(id) {
        try {
            return await Periodo.findOne({
                where: { Periodo_ID: id, Periodo_IsDeleted: false } // ‚úÖ Filtro de eliminado
            });
        } catch (error) {
            throw new Error(`Error al obtener per√≠odo: ${error.message}`);
        }
    }

    /** üîπ Crear un nuevo per√≠odo */
    //TODO: BULK CREATE
    static async create(data) {
        try {
            console.log(data);
            return await Periodo.create(data);
        } catch (error) {
            throw new Error(`Error al crear per√≠odo: ${error.message}`);
        }
    }

    /** üîπ Actualizar un per√≠odo solo si no est√° eliminado (reutilizando getById) */
    static async update(id, data) {
        try {
            const periodo = await this.getById(id); // ‚úÖ Reutiliza getById para verificar si el per√≠odo existe

            if (!periodo) return null; // üîπ Si el per√≠odo no existe o est√° eliminado

            const [rowsUpdated] = await Periodo.update(data, {
                where: { Periodo_ID: id, Periodo_IsDeleted: false } // ‚úÖ Aplica el filtro en la actualizaci√≥n
            });

            if (rowsUpdated === 0) return null; // üîπ Si no se actualiz√≥ nada
            return await this.getById(id); // ‚úÖ Retorna el per√≠odo actualizado
        } catch (error) {
            throw new Error(`Error al actualizar per√≠odo: ${error.message}`);
        }
    }

    /** üîπ Eliminar per√≠odo (marcado l√≥gico) solo si no est√° eliminado (reutilizando getById) */
    static async delete(id) {
        try {
            const periodo = await this.getById(id); // ‚úÖ Reutiliza getById para verificar si el per√≠odo existe

            if (!periodo) return null; // üîπ Si el per√≠odo no existe o ya est√° eliminado

            await Periodo.update(
                { Periodo_IsDeleted: true }, // üîπ Marcar como eliminado
                { where: { Periodo_ID: id, Periodo_IsDeleted: false } } // ‚úÖ Solo si no est√° eliminado ya
            );

            return await Periodo.findOne({ where: { Periodo_ID: id } }); // Retorna el per√≠odo actualizado
        } catch (error) {
            throw new Error(`Error al eliminar per√≠odo: ${error.message}`);
        }
    }
}
