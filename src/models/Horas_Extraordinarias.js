import { Horas_Extraordinarias } from "../schemas/Horas_Extraordinarias_schema.js";

export class Horas_ExtraordinariasModel {

    /** ðŸ”¹ Obtener todas las horas extraordinarias activas */
    static async getHoras_Extraordinarias() {
        try {
            return await Horas_Extraordinarias.findAll({
                where: { Horas_IsDeleted: false }
            });
        } catch (error) {
            throw new Error(`Error al obtener horas extraordinarias: ${error.message}`);
        }
    }

    /** ðŸ”¹ Obtener una hora extraordinaria por ID, solo si no estÃ¡ eliminada */
    static async getById(id) {
        try {
            return await Horas_Extraordinarias.findOne({
                where: { Horas_ID: id, Horas_IsDeleted: false } // âœ… Filtro de eliminaciÃ³n lÃ³gica
            });
        } catch (error) {
            throw new Error(`Error al obtener horas extraordinarias: ${error.message}`);
        }
    }

    /** ðŸ”¹ Crear un nuevo registro */
    static async create(data) {
        try {
            return await Horas_Extraordinarias.create(data);
        } catch (error) {
            throw new Error(`Error al crear horas extraordinarias: ${error.message}`);
        }
    }

    /** ðŸ”¹ Actualizar un registro solo si no estÃ¡ eliminado (reutilizando getById) */
    static async update(id, data) {
        try {
            const horasExtraordinarias = await this.getById(id); // âœ… Reutiliza getById

            if (!horasExtraordinarias) return null; // ðŸ”¹ Si no existe o estÃ¡ eliminado

            const [rowsUpdated] = await Horas_Extraordinarias.update(data, {
                where: { Horas_ID: id, Horas_IsDeleted: false } // âœ… Filtro en la actualizaciÃ³n
            });

            if (rowsUpdated === 0) return null; // ðŸ”¹ Si no se actualizÃ³ nada
            return await this.getById(id); // âœ… Retorna el registro actualizado
        } catch (error) {
            throw new Error(`Error al actualizar horas extraordinarias: ${error.message}`);
        }
    }

    /** ðŸ”¹ Eliminar (marcar como eliminado) solo si no estÃ¡ eliminado (reutilizando getById) */
    static async delete(id) {
        try {
            const horasExtraordinarias = await this.getById(id); // âœ… Reutiliza getById

            if (!horasExtraordinarias) return null; // ðŸ”¹ Si no existe o ya estÃ¡ eliminado

            await Horas_Extraordinarias.update(
                { Horas_IsDeleted: true }, // ðŸ”¹ Marcar como eliminado
                { where: { Horas_ID: id, Horas_IsDeleted: false } } // âœ… Solo si aÃºn no estÃ¡ eliminado
            );

            return await Horas_Extraordinarias.findOne({ where: { Horas_ID: id } }); // Retorna el registro actualizado
        } catch (error) {
            throw new Error(`Error al eliminar horas extraordinarias: ${error.message}`);
        }
    }

    /** ðŸ”¹ Obtener todas las horas extraordinarias de un usuario */
    static async getHoras_ExtraordinariasByUser(id) {
        try {
            return await Horas_Extraordinarias.findAll({
                where: { Usuario_Cedula: id, Horas_IsDeleted: false }
            });
        } catch (error) {
            throw new Error(`Error al obtener horas extraordinarias por usuario: ${error.message}`);
        }
    }
}
